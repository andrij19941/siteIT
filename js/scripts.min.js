// Відкладене завантаження картинок
$(document).ready(function() {
	$('img.lazy').lazyload({
		effect: "fadeIn"
	});
});


// Маска для телефону
$('.phone').mask('+38 (000) 00-00-000');



/**
 * Bootstrap
 */
const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]')
const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))

const myModalEl = document.getElementById('modal-video')
myModalEl.addEventListener('hidden.bs.modal', event => {
	$('#video-iframe').prop('src', '')
})


/**
 * Не викликає скріпт декілька раз
 */
let waitForFinalEvent = (function() {
	let timers = {};
	return function(callback, ms, uniqueId) {
		if (!uniqueId)
			uniqueId = "Не викликає двічі без унікального ідентифікатору";

		if (timers[uniqueId])
			clearTimeout(timers[uniqueId]);

		timers[uniqueId] = setTimeout(callback, ms);
	};
})();


/**
 * Зміна при кліку
 */
$(document).on('click', '[data-spell]', function(event) {

	// Відбираємо атрибут data-spell
	var data = $(this).data('spell'),
		splitData = data.split('<>'), // Формуємо масив з цього параметру
		secondLevelSplit; // Заготовка для майбутніх данних


	// Проходимося по цьому масиві через цикл
	$.each(splitData, function(index, val) {

		// Формуємо масив в нашу заготовлену змінну
		secondLevelSplit = val.split('|');

		// Виводимо відносно типу
		switch (secondLevelSplit[1]) {
			case 'html':
				// Має бути 3-ри параметри .class#id|type|data
				$(secondLevelSplit[0]).html(secondLevelSplit[2]);
				break;
			case 'toggleClass':
				// Має бути 3-ри параметри .class#id|type|data
				$(secondLevelSplit[0]).toggleClass(secondLevelSplit[2]);
				break;
			case 'addClass':
				// Має бути 3-ри параметри .class#id|type|data
				$(secondLevelSplit[0]).addClass(secondLevelSplit[2]);
				break;
			case 'removeClass':
				// Має бути 3-ри параметри .class#id|type|data
				$(secondLevelSplit[0]).removeClass(secondLevelSplit[2]);
				break;
			case 'attr':
				// Має бути 4-ри параметри .class#id|type|type-toggle|data
				$(secondLevelSplit[0]).attr(secondLevelSplit[2], secondLevelSplit[3]);
				break;
			case 'data':
				// Має бути 4-ри параметри .class#id|type|type-toggle|data
				$(secondLevelSplit[0]).data(secondLevelSplit[2], secondLevelSplit[3]);
				break;
			case 'doFunction':
				// Має бути 2-ва параметри functionName|type
				// eval(secondLevelSplit[0]);
				window[secondLevelSplit[0]]();
				break;
		}

	});
});




/**
 * Parallax
 */
let parallax = $('.js-parallax');

if (parallax.length) {
	parallax.each(function () {
		let _this = $(this),
			scale = _this.data('scale'),
			orientation = _this.data('orientation');

		new simpleParallax(_this[0], {
			scale: scale,
			orientation: orientation,
			delay: .5,
			overflow: true,
			transition: 'cubic-bezier(0,0,0,1)'
		});
	});
}

$(document).on('click', '.js-hide-collapse', function(event) {
	$('.collapse').collapse({ 'toggle': false }).collapse('hide');	
});



/**
 * Change the menu when scrolling down
 */
var min = false // From the beginning the cap is in normal mode
	, minHeith = 50 // Height in px after which you need to change the menu
	, menu = $("#nav-top") // The ID of the menu that you want to track and change
	, addClassName = "toggle-fixed-navbar" // The class you want to add
	, supportPageOffset = window.scrollY !== undefined;

$(document).scroll(function() {

	minHeith = ($(window).width() <= 480) ? 80 : 50;

	var scrollTop = $(document).scrollTop();

	if (scrollTop > minHeith && !min) {
		menu.addClass(addClassName);
		min = true;
	}
	if (scrollTop <= minHeith && min) {
		menu.removeClass(addClassName);
		min = false;
	}
});

// Запускаємо функцію змінити меню при загрузці сторінки
if (supportPageOffset > 0) {
	
	minHeith = ($(window).width() <= 480) ? 80 : 50;

	if ($(document).scrollTop() > minHeith && !min) {
		menu.addClass(addClassName);
		min = true;
	}

	if ($(document).scrollTop() <= minHeith && min) {
		menu.removeClass(addClassName);
		min = false;
	}
}








/**
 * Відправлення форми на Ajax
 */
$(document).on('submit', '.send-form', function (e) {
	e.preventDefault();

	let formData = new FormData(this), // Відбираємо дані з форми ($_FILES, $_POST)
		form        = $(this),
		formSuccess = form.data('success'),         // #id блоку який треба показати після успішної відправки
		formName    = form.data('form-name'),       // Назва форми data-name=""
		formClass   = '.' + formName + '-form',     // Css class для більшої зручності 
		button      = form.find('[type="submit"]'), // Кнопка відправки
		loading     = 'loading';                    // Css class який відповідає за вигляд завантаження

	$.ajax({
		dataType: 'json',
		type: 'POST',
		url: 'ajax-send.php',
		cache: false,
		contentType: false,
		processData: false,
		data: formData,

		beforeSend: function() {
			// Робимо стан кнопки завантаження
			button.attr('disabled', 'disabled').addClass(loading);
		},

		success: function(result) {

				let type = result.type,       // Тип відповіді (Помилка чи успіх)
					link = result.link,       // Посилання куди потрібно переправити користувача після успішу
					textError = result.error; // Текст помилки

				if (type) {
					switch (type) {
						case 'success':
							// Оповіщуємо людину про успіх
							$.notify(textError, 'success', {autoHideDelay: 200000});

							// // Приховуємо форму
							// form.slideUp(400, function(){ form.remove(); });

							// // Показуємо блок успішного відправлення
							// $(formSuccess).slideDown(400);

							// Перекидаємо на посилання, якщо воно є
							if (link) { waitForFinalEvent(function(){ window.location.href = link; }, 2500); }
							break;

						default:
						case 'danger':
							$.notify(textError, 'error', {autoHideDelay: 10000});
							return true;
					}
				}
		},
		complete: function(data) {

			// Розблоковуємо кнопку
			setTimeout(function() {
				button.removeAttr('disabled').removeClass(loading);
			}, 1200);
			
		}
	});
});








// Function to set a cookie
function setCookie(name, value, days) {
	const expires = new Date();
	expires.setTime(expires.getTime() + days * 24 * 60 * 60 * 1000);
	document.cookie = `${name}=${value};expires=${expires.toUTCString()};path=/`;
}

// Function to check if a cookie exists
function getCookie(name) {
	const cookies = document.cookie.split('; ');
	for (let cookie of cookies) {
		const [cookieName, cookieValue] = cookie.split('=');
		if (cookieName === name) {
			return cookieValue;
		}
	}
	return null;
}

// Function to display or hide the cookie banner
function showCookieBanner() {
	const cookieBanner = document.getElementById('cookie-banner');
	if (!getCookie('cookieAccepted')) {
		cookieBanner.style.display = 'flex';
	} else {
		cookieBanner.style.display = 'none';
	}
}

// Event listener for accepting cookies
document.getElementById('cookie-accept').addEventListener('click', function () {
	setCookie('cookieAccepted', 'true', 365); // Set the cookie for 365 days
	showCookieBanner(); // Hide the banner
});

// Initial check to display or hide the banner
showCookieBanner();
  